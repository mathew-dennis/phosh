name: Build and Package phosh for ARM64

on:
  push:
    branches:
      - background-new
  workflow_dispatch:  # Allows manual triggering

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up cross-compilation environment and build
      run: |
        set -euxo pipefail  # Enable strict error handling and logging
        docker run --rm -v ${{ github.workspace }}:/workspace -w /workspace debian:latest /bin/bash -c "
          # Set debconf frontend to noninteractive to suppress warnings
          export DEBIAN_FRONTEND=noninteractive && \
          
          # Update package list and install essential packages
          apt-get update && \
          apt-get install -y build-essential meson ninja-build git \
                             crossbuild-essential-arm64 && \
          apt-get -y build-dep . || exit 1

          # Initialize and update submodules
          git config --global --add safe.directory /workspace && \
          git submodule update --init --recursive || exit 1

          # Create custom cross file for Meson
          cat > /workspace/arm64-cross.txt <<EOL
          [binaries]
          c = 'aarch64-linux-gnu-gcc'
          cpp = 'aarch64-linux-gnu-g++'
          ar = 'aarch64-linux-gnu-ar'
          strip = 'aarch64-linux-gnu-strip'
          pkgconfig = 'aarch64-linux-gnu-pkg-config'

          [host_machine]
          system = 'linux'
          cpu_family = 'aarch64'
          cpu = 'aarch64'
          endian = 'little'
          EOL

          # Set up cross-compilation toolchain
          export CC=aarch64-linux-gnu-gcc && \
          export CXX=aarch64-linux-gnu-g++ && \
          export AR=aarch64-linux-gnu-ar && \
          export AS=aarch64-linux-gnu-as && \
          export LD=aarch64-linux-gnu-ld && \
          export STRIP=aarch64-linux-gnu-strip || exit 1

          # Create build directory and configure for ARM64
          meson setup _build --cross-file /workspace/arm64-cross.txt || exit 1
          meson compile -C _build || exit 1

          # Create a source distribution and build the DEB package
          dpkg-source --build . || exit 1
          debuild -us -uc -b -a arm64 || exit 1
        "

    - name: Upload DEB package
      uses: actions/upload-artifact@v3
      with:
        name: deb-package
        path: "*.deb"
